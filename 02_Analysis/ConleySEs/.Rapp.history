plot(OUTEVT[!is.na(total_number_of_people), c("total_number_of_people","objectcount") , with=F])
OUTEVT[objectcount>1000]
OUTEVT[objectcount>10000]
OUTEVT[!is.na(total_number_of_people)]
OUTEVT[!is.na(total_number_of_people) & objectcount>1000]
plot(OUTEVT[!is.na(total_number_of_people), c("total_number_of_people","objectcount") , with=F])
plot(OUTEVT[!is.na(total_number_of_people) & objectcount<100, c("total_number_of_people","objectcount") , with=F])
OUTEVT[objectcount==total_number_of_people]
is_installed <- function(mypkg) is.element(mypkg, installed.packages()[,1])#
#
load_or_install<-function(package_names)#
{#
#
  for(package_name in package_names)#
  {#
    if(!is_installed(package_name))#
    {#
       install.packages(package_name,repos="http://lib.stat.cmu.edu/R/CRAN")#
    }#
    library(package_name,character.only=TRUE,quietly=TRUE,verbose=FALSE)#
  }#
}#
#
DTUniqueBy <- function(data, varvec) {#
  data <- as.data.table(data)#
  data[!duplicated(data.frame(data[, varvec, with=F]))]#
}#
preProcess <- function(content, keepnum=FALSE, keepperiod=FALSE,tolower=TRUE) {#
if(keepperiod==TRUE) {#
content <- gsub("[^[:alnum:].,]", " ", content )#
} #
else {#
content <- gsub("[^[:alnum:]]", " ", content )#
}#
content <- gsub("[[:space:]]+", " ", content )#
if(tolower==TRUE) {#
content <- tolower(content)#
}#
#
#content  <- content [!grepl("^(| |\\.)*$", content )]#
#
content  <- gsub("^ *", "  ", content )#
if(keepnum==FALSE) {#
content  <- gsub("([0-9])*", "", content )#
}#
content  <- gsub("^-*", "", content )#
content  <- gsub(" +", " ", content )#
content  <- gsub(" *$", "", content )#
#content  <- content[!grepl("^(| |\\.\\,)*$",content )]#
content  <- gsub(" *$", "", content )#
content  <- gsub("^ *", "", content )#
#
content#
}#
library(RecordLinkage)#
#
ClosestMatch2 = function(string, stringVector){#
#
  distance = levenshteinSim(string, stringVector);#
  data.table(stringVector[distance == max(distance)],max(distance))	  #
}#
#
timeVector <- function(starttime,endtime,timestep="months") {#
#
starttime<- as.POSIXct(strptime(starttime, '%Y-%m-%d'))#
endtime<- as.POSIXct(strptime(endtime, '%Y-%m-%d'))#
if(timestep=="quarters") {#
timestep="months"#
ret<-seq(from=as.POSIXct(starttime), to=as.POSIXct(endtime), by=timestep)#
quarter <- gsub("(^[123]{1}$)", 1, month(ret))#
quarter <- gsub("(^[456]{1}$)", 2, quarter)#
quarter <- gsub("(^[789]{1}$)", 3, quarter)#
quarter <- as.numeric(gsub("(^[102]{2}$)", 4, quarter))#
#
ret<-paste(year(ret),quarter,sep="-")#
ret<-unique(ret)#
} else {#
#
ret<-seq(from=as.POSIXct(starttime), to=as.POSIXct(endtime), by=timestep)#
}#
ret#
#
}#
panelStructure <- function(group,timevec) {#
tt<-rep(timevec,length(group))#
tt2 <- as.character(sort(rep(group,length(timevec))))#
mat <- cbind("group"=data.frame(tt2),"timevec"=data.frame(tt))#
names(mat)<-c("group","timevec")#
mat#
}#
load_or_install(c("lubridate","foreign","doMC","countrycode","operator.tools","rgeos","geosphere","fields","raster","rootSolve","R.oo","stringr","classInt","rgdal", "maptools","XML","plyr","RMySQL","RTextTools", "topicmodels","corpora","ggplot2","tm","foreach","RColorBrewer","wordcloud","lsa","MASS","openNLP","openNLPmodels.en","data.table","depmixS4"))#
#
options(stringsAsFactors=FALSE)
load("/Users/thiemo/Dropbox/Research/Matteo and Thiemo/senna/TTIM.rdata")#
TTIM$year<-str_extract(TTIM$report_date,"([0-9]{4})")#
#
CROWD1<-data.table(read.csv(file="~/Dropbox/Research/Matteo and Thiemo/crowdflower/a720812.csv"))#
CROWD2<-data.table(read.csv(file="~/Dropbox/Research/Matteo and Thiemo/crowdflower/a739090.csv"))#
CROWD<-rbind(CROWD1,CROWD2)#
#
TTIM <- join(TTIM, CROWD[,c("srid","pid","rid","sid","civilians","militants_terrorists_insurgents","security_forces","total_number_of_people"), with=F])
TTIM
class(TTIM$total_number_of_people)
class(TTIM$objectcount)
TTIM$civilians<-as.numeric(TTIM$civilians)#
TTIM$security_forces<-as.numeric(TTIM$security_forces)#
TTIM$militants_terrorists_insurgents<-as.numeric(TTIM$militants_terrorists_insurgents)#
TTIM$total_number_of_people<-as.numeric(TTIM$total_number_of_people)#
TTIM$year<-gsub("(.*)([0-9]{4})","\\2",TTIM$report_date)#
TTIM$year<-as.numeric(TTIM$year)#
TTIM$month<-gsub("^([0-9]+)\\/(.*)","\\1",TTIM$report_date)#
TTIM$month<-as.numeric(TTIM$month)#
TTIM$quarter<-quarter(mdy(TTIM$report_date))
plot(TTIM[!is.na(total_number_of_people) & objectcount<100, c("total_number_of_people","objectcount") , with=F])
plot(TTIM[!is.na(total_number_of_people) , c("total_number_of_people","objectcount") , with=F])
plot(TTIM[!is.na(total_number_of_people) & objectcount<1000 & total_number_of_people<1000 , c("total_number_of_people","objectcount") , with=F])
cor(TTIM[!is.na(total_number_of_people) & objectcount<1000 & total_number_of_people<1000 , c("total_number_of_people","objectcount") , with=F])
cor(TTIM[!is.na(total_number_of_people) & objectcount>0 & total_number_of_people<1000 , c("total_number_of_people","objectcount") , with=F])
cor(TTIM[!is.na(total_number_of_people) & objectcount<1000  & objectcount>0 & total_number_of_people<1000 , c("total_number_of_people","objectcount") , with=F])
plot(TTIM[!is.na(total_number_of_people) & objectcount<1000  & objectcount>0 & total_number_of_people<1000 , c("total_number_of_people","objectcount") , with=F])
TTIM
TTIM[objectcount!=total_number_of_people]
TTIM[objectcount==total_number_of_people]
TTIM[objectcount!=total_number_of_people]
TTIM[, countdiff := objectcount-total_number_of_people]
TTIM
TTIM[abs(countdiff)>100]
TTIM[abs(countdiff)>20]
TTIM[abs(countdiff)>5]
TTIM$eventid<-""#
TTIM[sid %in% TTIM[accuracy>.8][!is.na(districtmatch) , list(svt=.N), by=c("sid")]$sid]$eventid<-TTIM[sid %in% TTIM[accuracy>.8][!is.na(districtmatch), list(svt=.N), by=c("sid")]$sid]$sid#
TTIM<-TTIM[order(rid,pid,sid)]#
query <- paste("SELECT *  FROM districts2001 d LEFT JOIN districts2001spellings ds ON d.districtid = ds.district")#
districts<-data.table(fetch(dbSendQuery(con,query),-1))#
districts$variation[is.na(districts$variation)]<-districts$name[is.na(districts$variation)]#
districts$name<-preProcess(districts$name)#
districts$variation<-preProcess(districts$variation)#
districts$state<-substring(districts$code,4,5)#
###LOAD ONES THAT HAVE BEEN CROWDSOURCED ALREADY#
TEMP1<-TTIM[!is.na(code)]#
TEMP2<-DTUniqueBy(join(TTIM[is.na(code)][!is.na(districtmatch)][, names(TTIM) %!in% c("STATE"),with=F], DTUniqueBy(districts, c("state","variation"))[,list(STATE=state,districtmatch=variation,district=name)]),"srid")#
TEMP2$code<-TEMP2$STATE#
#
OUTEVT<-rbind(TEMP1,TEMP2, fill=TRUE)#
OUTEVT$year<-gsub("(.*)([0-9]{4})","\\2",OUTEVT$report_date)#
OUTEVT$year<-as.numeric(OUTEVT$year)#
OUTEVT$month<-gsub("^([0-9]+)\\/(.*)","\\1",OUTEVT$report_date)#
OUTEVT$month<-as.numeric(OUTEVT$month)#
OUTEVT$quarter<-quarter(mdy(OUTEVT$report_date))#
#
OUTEVT[is.na(district)]$district<-OUTEVT[is.na(district)]$districtmatch#
OUTEVT[is.na(code) & !is.na(STATE)]$code<-OUTEVT[is.na(code) & !is.na(STATE)]$STATE#
OUTEVT<-OUTEVT[eventid!=""]
OUTEVT
###COMPARE MANUAL CODING#
MANU<-data.table(read.csv(file="~/Dropbox/Research/Matteo and Thiemo/manu-eval.csv"))#
MANU<-MANU[check.completed=="y"]#
MANU$district<-preProcess(MANU$district)#
###FIX UP DISTRICTS#
#
DIST<-MANU[, .N, by=c("district","state")]#
DIST$ddid<-1:nrow(DIST)#
DIST<-DIST[district!=""]#
#
matchIndiaDistrictsCand<-function(TEMP, CANDS) {#
if(!is.na(TEMP[1]$state)) {#
CANDS<-CANDS[grep(TEMP[1]$state,state)]#
}#
#
ret<-NULL#
if(nrow(CANDS)>0) {#
#
MMATCH<-cbind(preProcess(TEMP[1]$district),ClosestMatch2(preProcess(TEMP[1]$district), CANDS$variation)[order(V1,decreasing=TRUE)][1])[order(V2, decreasing=TRUE)][1]#
#
if(nrow(MMATCH==1)) {#
CANDS<-CANDS[preProcess(variation)==as.matrix(MMATCH)[,2]]#
ret<-data.frame("ddid"=TEMP$ddid,"district"=TEMP$district,"code"=CANDS$state,"districtmatch"=CANDS$name,"match"=CANDS$variation,"accuracy"=as.matrix(MMATCH)[,3])#
} #
} #
ret#
#
}#
 system.time(MATCHES<-do.call("rbind", mclapply(1:nrow(DIST) , function(x) matchIndiaDistrictsCand(DIST[x],districts),mc.cores=2)))
setnames(MANU, "state","code")#
#
MANU<-join(MANU, MATCHES)#
MANU<-DTUniqueBy(MANU, "eventid")#
MANU<-MANU[!is.na(districtmatch)]#
MANU$month<-as.numeric(MANU$month)#
MANU$quarter<-quarter(mdy(MANU$date))
MANU
OUTEVT2<-OUTEVT
setnames(MANU, "id","pid")#
OUTEVT<-OUTEVT[year==2005]
OUTEVT
MANU
MANU[, .N, by=pid]
###LEVEL 1: district, state, year, event count#
EVAL<-merge(DTUniqueBy(OUTEVT,"eventid")[eventid!="", list(machine=.N), by=c("districtmatch","code")], MANU[eventid!="" & !is.na(districtmatch), list(human=.N), by=c("districtmatch","code")], all.x=TRUE, all.y=TRUE, by=c("districtmatch","code"))#
EVAL$machine_na<-EVAL$machine#
EVAL[is.na(machine)]$machine_na<-0#
EVAL$human_na<-EVAL$human#
EVAL[is.na(human)]$human_na<-0#
cor(EVAL[!is.na(machine) & !is.na(human), c("machine","human"),with=F])#
cor(EVAL[, c("machine_na","human_na"),with=F])
plot(EVAL[, c("machine_na","human_na"),with=F]))
plot(EVAL[, c("machine_na","human_na"),with=F])
plot(EVAL[machine_na<50 & human_na<50, c("machine_na","human_na"),with=F])
EVAL[, error := machine_na-human_na]#
EVAL[!is.na(districtmatch), sum(abs(error))/sum(human_na)]#
EVAL$relerror<-EVAL[, abs(error)/human_na]#
EVAL<-EVAL[!is.na(districtmatch)]
plot(EVAL[, c("machine","human"),with=F])
###LEVEL 1: district, state, quarter, event count#
EVAL<-merge(OUTEVT[eventid!="", list(machine=.N), by=c("quarter","districtmatch","code")], MANU[eventid!="" & !is.na(districtmatch), list(human=.N), by=c("quarter","districtmatch","code")], all.x=TRUE, all.y=TRUE, by=c("districtmatch","code","quarter"))#
cor(EVAL[!is.na(machine) & !is.na(human), c("machine","human"),with=F])#
plot(EVAL[, c("machine","human"),with=F])
summary(felm(machine_na ~ human_na | districtmatch + month, data=EVAL))
###LEVEL 1: district, state, month, event count#
EVAL<-merge(OUTEVT[eventid!="", list(machine=.N), by=c("month","districtmatch","code")], MANU[eventid!="" & !is.na(districtmatch), list(human=.N), by=c("month","districtmatch","code")], all.x=TRUE, all.y=TRUE, by=c("districtmatch","code","month"))#
EVAL$machine_na<-EVAL$machine#
EVAL[is.na(machine)]$machine_na<-0#
EVAL$human_na<-EVAL$human#
EVAL[is.na(human)]$human_na<-0#
summary(felm(machine_na ~ human_na | districtmatch + month, data=EVAL))
summary(felm(machine_na ~ human_na | districtmatch + month, data=EVAL))
summary(felm(machine_na ~ human_na | districtmatch, data=EVAL))
summary(felm(machine_na ~ human_na , data=EVAL))
summary(felm(machine_na ~ human_na | districtmatch + month, data=EVAL))
summary(felm(machine_na ~ human_na , data=EVAL))
summary(felm(machine ~ human , data=EVAL))
summary(felm(machine ~ human | dd, data=EVAL))
summary(felm(machine ~ human | month, data=EVAL))
summary(felm(machine ~ human | month + districtmatch, data=EVAL))
EVAL
MANU
table(MANU$eventverb)
table(OUTEVT$verbstem)
MANU
OUTEVT
OUTEVT[, .N, by=eventid]
MANU[, .N, by=eventid]
###COMPARE MANUAL CODING#
MANU<-data.table(read.csv(file="~/Dropbox/Research/Matteo and Thiemo/manu-eval.csv"))#
MANU<-MANU[check.completed=="y"]#
MANU$district<-preProcess(MANU$district)
MANU
MANU[grep("inferred",comments)]
MANU[grep("district",comments)]
MANU[grep("district",comments)][23]
MANU[grep("district",comments)]
MANU[grep("district",comments)][131]
MANU[grep("district",comments)][121]
MANU[grep("district",comments)][111]
MANU[grep("district",comments)][21]
DIST<-MANU[, .N, by=c("district","state")]#
DIST$ddid<-1:nrow(DIST)#
DIST<-DIST[district!=""]#
#
matchIndiaDistrictsCand<-function(TEMP, CANDS) {#
if(!is.na(TEMP[1]$state)) {#
CANDS<-CANDS[grep(TEMP[1]$state,state)]#
}#
#
ret<-NULL#
if(nrow(CANDS)>0) {#
#
MMATCH<-cbind(preProcess(TEMP[1]$district),ClosestMatch2(preProcess(TEMP[1]$district), CANDS$variation)[order(V1,decreasing=TRUE)][1])[order(V2, decreasing=TRUE)][1]#
#
if(nrow(MMATCH==1)) {#
CANDS<-CANDS[preProcess(variation)==as.matrix(MMATCH)[,2]]#
ret<-data.frame("ddid"=TEMP$ddid,"district"=TEMP$district,"code"=CANDS$state,"districtmatch"=CANDS$name,"match"=CANDS$variation,"accuracy"=as.matrix(MMATCH)[,3])#
} #
} #
ret#
#
}#
 system.time(MATCHES<-do.call("rbind", mclapply(1:nrow(DIST) , function(x) matchIndiaDistrictsCand(DIST[x],districts),mc.cores=2)))#
#
setnames(MANU, "state","code")#
#
MANU<-join(MANU, MATCHES)#
MANU<-DTUniqueBy(MANU, "eventid")#
MANU<-MANU[!is.na(districtmatch)]#
MANU$month<-as.numeric(MANU$month)#
MANU$quarter<-quarter(mdy(MANU$date))#
#
setnames(MANU, "id","pid")
###COMPARE MANUAL CODING#
MANU<-data.table(read.csv(file="~/Dropbox/Research/Matteo and Thiemo/manu-eval.csv"))#
MANU<-MANU[check.completed=="y"]#
MANU$district<-preProcess(MANU$district)#
###FIX UP DISTRICTS#
#
DIST<-MANU[, .N, by=c("district","state")]#
DIST$ddid<-1:nrow(DIST)#
DIST<-DIST[district!=""]#
#
matchIndiaDistrictsCand<-function(TEMP, CANDS) {#
if(!is.na(TEMP[1]$state)) {#
CANDS<-CANDS[grep(TEMP[1]$state,state)]#
}#
#
ret<-NULL#
if(nrow(CANDS)>0) {#
#
MMATCH<-cbind(preProcess(TEMP[1]$district),ClosestMatch2(preProcess(TEMP[1]$district), CANDS$variation)[order(V1,decreasing=TRUE)][1])[order(V2, decreasing=TRUE)][1]#
#
if(nrow(MMATCH==1)) {#
CANDS<-CANDS[preProcess(variation)==as.matrix(MMATCH)[,2]]#
ret<-data.frame("ddid"=TEMP$ddid,"district"=TEMP$district,"code"=CANDS$state,"districtmatch"=CANDS$name,"match"=CANDS$variation,"accuracy"=as.matrix(MMATCH)[,3])#
} #
} #
ret#
#
}#
 system.time(MATCHES<-do.call("rbind", mclapply(1:nrow(DIST) , function(x) matchIndiaDistrictsCand(DIST[x],districts),mc.cores=2)))#
#
setnames(MANU, "state","code")#
#
MANU<-join(MANU, MATCHES)#
MANU<-DTUniqueBy(MANU, "eventid")#
MANU<-MANU[!is.na(districtmatch)]#
MANU$month<-as.numeric(MANU$month)#
MANU$quarter<-quarter(mdy(MANU$date))#
#
setnames(MANU, "id","pid")#
OUTEVT<-OUTEVT[pid %in% names(table(MANU$pid))]
OUTEVT
###LEVEL 1: district, state, year, event count#
EVAL<-merge(DTUniqueBy(OUTEVT,"eventid")[eventid!="", list(machine=.N), by=c("districtmatch","code")], MANU[eventid!="" & !is.na(districtmatch), list(human=.N), by=c("districtmatch","code")], all.x=TRUE, all.y=TRUE, by=c("districtmatch","code"))#
EVAL$machine_na<-EVAL$machine#
EVAL[is.na(machine)]$machine_na<-0#
EVAL$human_na<-EVAL$human#
EVAL[is.na(human)]$human_na<-0#
cor(EVAL[!is.na(machine) & !is.na(human), c("machine","human"),with=F])#
cor(EVAL[, c("machine_na","human_na"),with=F])
EVAL[, error := machine_na-human_na]#
EVAL[!is.na(districtmatch), sum(abs(error))/sum(human_na)]#
EVAL$relerror<-EVAL[, abs(error)/human_na]#
EVAL<-EVAL[!is.na(districtmatch)]
summary(felm(machine_na ~ human_na | districtmatch + month, data=EVAL))
summary(felm(machine_na ~ human_na | districtmatch + year, data=EVAL))
summary(felm(machine_na ~ human_na | districtmatch, data=EVAL))
summary(felm(machine_na ~ human_na , data=EVAL))
EVAL
EVAL<-merge(DTUniqueBy(OUTEVT,"eventid")[eventid!="", list(machine=.N), by=c("code","year","code")], MANU[eventid!="" & !is.na(districtmatch), list(human=.N), by=c("code","year")], all.x=TRUE, all.y=TRUE, by=c("districtmatch","code"))#
EVAL$machine_na<-EVAL$machine#
EVAL[is.na(machine)]$machine_na<-0#
EVAL$human_na<-EVAL$human#
EVAL[is.na(human)]$human_na<-0#
cor(EVAL[!is.na(machine) & !is.na(human), c("machine","human"),with=F])#
cor(EVAL[, c("machine_na","human_na"),with=F])
EVAL<-merge(DTUniqueBy(OUTEVT,"eventid")[eventid!="", list(machine=.N), by=c("code","year","code")], MANU[eventid!="" & !is.na(districtmatch), list(human=.N), by=c("code","year")], all.x=TRUE, all.y=TRUE, by=c("year","code"))
EVAL<-merge(DTUniqueBy(OUTEVT,"eventid")[eventid!="", list(machine=.N), by=c("code","year")], MANU[eventid!="" & !is.na(districtmatch), list(human=.N), by=c("code","year")], all.x=TRUE, all.y=TRUE, by=c("year","code"))#
EVAL$machine_na<-EVAL$machine#
EVAL[is.na(machine)]$machine_na<-0#
EVAL$human_na<-EVAL$human#
EVAL[is.na(human)]$human_na<-0#
cor(EVAL[!is.na(machine) & !is.na(human), c("machine","human"),with=F])#
cor(EVAL[, c("machine_na","human_na"),with=F])
summary(felm(machine_na ~ human_na | code + year, data=EVAL))
EVAL
summary(felm(machine_na ~ human_na | code , data=EVAL))
EVAL
EVAL[, error := machine_na-human_na]
EVAL[!is.na(code), sum(abs(error))/sum(human_na)]#
EVAL$relerror<-EVAL[, abs(error)/human_na]
EVAL[ , sum(machine_na)]
EVAL[ , sum(human_na)]
EVAL
HUMAN
HUM
MANU
timeVector <- function(starttime,endtime,timestep="months") {#
#
starttime<- as.POSIXct(strptime(starttime, '%Y-%m-%d'))#
endtime<- as.POSIXct(strptime(endtime, '%Y-%m-%d'))#
if(timestep=="quarters") {#
timestep="months"#
ret<-seq(from=as.POSIXct(starttime), to=as.POSIXct(endtime), by=timestep)#
quarter <- gsub("(^[123]{1}$)", 1, month(ret))#
quarter <- gsub("(^[456]{1}$)", 2, quarter)#
quarter <- gsub("(^[789]{1}$)", 3, quarter)#
quarter <- as.numeric(gsub("(^[102]{2}$)", 4, quarter))#
#
ret<-paste(year(ret),quarter,sep="-")#
ret<-unique(ret)#
} else {#
#
ret<-seq(from=as.POSIXct(starttime), to=as.POSIXct(endtime), by=timestep)#
}#
ret#
#
}#
panelStructure <- function(group,timevec) {#
tt<-rep(timevec,length(group))#
tt2 <- as.character(sort(rep(group,length(timevec))))#
mat <- cbind("group"=data.frame(tt2),"timevec"=data.frame(tt))#
names(mat)<-c("group","timevec")#
mat#
}#
#
options(stringsAsFactors=FALSE)
load("/Users/thiemo/Dropbox/Research/Cabinet Ministers/Results/MIN.NAMESEP.SMOOTH.V2.rdata")
head(MIN.NAMESEP.SMOOTH)
TEMP<-MIN.NAMESEP.SMOOTH#
#
BAGS<-TEMP[, list(bag=paste(rawprocessed_cap,collapse="\n")), by=c("altiso2c","year")]
TEMP$year<-year(TEMP$date)
TEMP<-MIN.NAMESEP.SMOOTH#
#
BAGS<-TEMP[, list(bag=paste(rawprocessed_cap,collapse="\n")), by=c("altiso2c","year")]
TEMP
TEMP$year<-year(TEMP$date)
head(TEMP)
BAGS<-TEMP[, list(bag=paste(rawprocessed_cap,collapse="\n")), by=c("altiso2c","year")]
BAGS<-TEMP[, list(bag=paste(againfixpaste,collapse="\n")), by=c("altiso2c","year")]
BAGS[grep("\\bDecentralization\\b|\\bAdministrative Reform\\b|\\bDevolution\\b",bag)]
BAGS
nrow(BAGS)
is_installed <- function(mypkg) is.element(mypkg, installed.packages()[,1])#
#
load_or_install<-function(package_names)#
{#
#
  for(package_name in package_names)#
  {#
    if(!is_installed(package_name))#
    {#
       install.packages(package_name,repos="http://lib.stat.cmu.edu/R/CRAN")#
    }#
    library(package_name,character.only=TRUE,quietly=TRUE,verbose=FALSE)#
  }#
}#
bottom <- function(frame, rows=5) {#
#
frame[(nrow(frame)-rows:nrow(frame)),]#
#
}#
#
preProcess <- function(content, keepnum=FALSE, keepperiod=FALSE,tolower=TRUE) {#
if(keepperiod==TRUE) {#
content <- gsub("[^[:alnum:].,]", " ", content )#
} #
else {#
content <- gsub("[^[:alnum:]]", " ", content )#
}#
content <- gsub("[[:space:]]+", " ", content )#
if(tolower==TRUE) {#
content <- tolower(content)#
}#
#
#content  <- content [!grepl("^(| |\\.)*$", content )]#
#
content  <- gsub("^ *", "  ", content )#
if(keepnum==FALSE) {#
content  <- gsub("([0-9])*", "", content )#
}#
content  <- gsub("^-*", "", content )#
content  <- gsub(" +", " ", content )#
content  <- gsub(" *$", "", content )#
#content  <- content[!grepl("^(| |\\.\\,)*$",content )]#
content  <- gsub(" *$", "", content )#
content  <- gsub("^ *", "", content )#
#
content#
}#
load_or_install(c("SDMTools","classInt","rgdal", "maptools","XML","plyr","RMySQL","RTextTools","ggplot2","foreach","RColorBrewer","wordcloud","MASS","data.table","depmixS4","raster"))#
con <- dbConnect(MySQL(), username="root", password="", dbname="nrega", unix.socket="/tmp/mysql.sock")
is_installed <- function(mypkg) is.element(mypkg, installed.packages()[,1])#
#
load_or_install<-function(package_names)#
{#
#
  for(package_name in package_names)#
  {#
    if(!is_installed(package_name))#
    {#
       install.packages(package_name,repos="http://lib.stat.cmu.edu/R/CRAN")#
    }#
    library(package_name,character.only=TRUE,quietly=TRUE,verbose=FALSE)#
  }#
}#
bottom <- function(frame, rows=5) {#
#
frame[(nrow(frame)-rows:nrow(frame)),]#
#
}#
DTUniqueBy <- function(data, varvec) {#
  data <- as.data.table(data)#
  data[!duplicated(data.frame(data[, varvec, with=F]))]#
}#
#
panelStructure <- function(group,timevec) {#
tt<-rep(timevec,length(group))#
tt2 <- as.character(sort(rep(group,length(timevec))))#
mat <- cbind("group"=data.frame(tt2),"timevec"=data.frame(tt))#
names(mat)<-c("group","timevec")#
mat#
}#
preProcess <- function(content, keepnum=FALSE, keepperiod=FALSE,tolower=TRUE) {#
if(keepperiod==TRUE) {#
content <- gsub("[^[:alnum:].,]", " ", content )#
} #
else {#
content <- gsub("[^[:alnum:]]", " ", content )#
}#
content <- gsub("[[:space:]]+", " ", content )#
if(tolower==TRUE) {#
content <- tolower(content)#
}#
#
#content  <- content [!grepl("^(| |\\.)*$", content )]#
#
content  <- gsub("^ *", "  ", content )#
if(keepnum==FALSE) {#
content  <- gsub("([0-9])*", "", content )#
}#
content  <- gsub("^-*", "", content )#
content  <- gsub(" +", " ", content )#
content  <- gsub(" *$", "", content )#
#content  <- content[!grepl("^(| |\\.\\,)*$",content )]#
content  <- gsub(" *$", "", content )#
content  <- gsub("^ *", "", content )#
#
content#
}#
vwReg<-function(formula, data, title="", B=1000,limitdens=FALSE, shade=TRUE, shade.alpha=.1, CIcol="", spag=FALSE, spag.color="darkblue", mweight=TRUE, show.lm=FALSE, show.points=FALSE,show.median = TRUE, median.col = "white", shape = 21, show.CI=TRUE, method=loess, bw=FALSE, slices=300, palette=colorRampPalette(c("#FFEDA0", "#DD0000"), bias=2)(20), ylim=NULL, quantize = "continuous",  add=FALSE, ...) {#
    IV <- all.vars(formula)[2]#
    DV <- all.vars(formula)[1]#
    data <- na.omit(data[order(data[, IV]), c(IV, DV)])#
    if (bw == TRUE) {#
        palette <- colorRampPalette(c("#EEEEEE", "#999999", "#333333"), bias=2)(20)#
    }#
#
    print("Computing boostrapped smoothers ...")#
    newx <- data.frame(seq(min(data[, IV]), max(data[, IV]), length=slices))#
    colnames(newx) <- IV#
    l0.boot <- matrix(NA, nrow=nrow(newx), ncol=B)#
    l0 <- method(formula, data)#
    for (i in 1:B) {#
        data2 <- data[sample(nrow(data), replace=TRUE), ]#
        data2 <- data2[order(data2[, IV]), ]#
        if (class(l0)=="loess") {#
            m1 <- method(formula, data2, control = loess.control(surface = "i", statistics="a", trace.hat="a"), ...)#
        } else {#
            m1 <- method(formula, data2, ...)#
        }#
        l0.boot[, i] <- predict(m1, newdata=newx)#
    }#
#
    # compute median and CI limits of bootstrap#
    library(plyr)#
    library(reshape2)#
    CI.boot <- adply(l0.boot, 1, function(x) quantile(x,  prob=c(.05, .5, .95, pnorm(c(-2,-1.5, -1, 0, 1, 1.5, 2))), na.rm=TRUE))[, -1]#
    colnames(CI.boot)[1:10] <- c("LL", "M", "UL", paste0("SD", 1:7))#
    CI.boot$x <- newx[, 1]#
    CI.boot$width <- CI.boot$UL - CI.boot$LL#
    # scale the CI width to the range 0 to 1 and flip it (bigger numbers = narrower CI)#
    CI.boot$w2 <- (CI.boot$width - min(CI.boot$width))#
    CI.boot$w3 <- 1-(CI.boot$w2/max(CI.boot$w2))#
	CI.boot$index<-1:slices#
    # convert bootstrapped spaghettis to long format#
    b2 <- melt(l0.boot)#
    b2$x <- newx[,1]#
    colnames(b2) <- c("index", "B", "value", "x")#
#
    library(ggplot2)#
    library(RColorBrewer)#
    # Construct ggplot#
    # All plot elements are constructed as a list, so they can be added to an existing ggplot#
    # if add == FALSE: provide the basic ggplot object#
    p0 <- ggplot(data, aes_string(x=IV, y=DV)) + theme_bw()#
    # initialize elements with NULL (if they are defined, they are overwritten with something meaningful)#
    gg.tiles <- gg.poly <- gg.spag <- gg.median <- gg.CI1 <- gg.CI2 <- gg.lm <- gg.points <- gg.title <- NULL#
#
    if (shade == TRUE) {#
        quantize <- match.arg(quantize, c("continuous", "SD"))#
        if (quantize == "continuous") {#
            print("Computing density estimates for each vertical cut ...")#
            flush.console()#
        	##make ylim dependent on xrange, not global#
            if (is.null(ylim)) {#
              #  min_value <- min(min(l0.boot, na.rm=TRUE), min(data[, DV], na.rm=TRUE))#
              #  max_value <- max(max(l0.boot, na.rm=TRUE), max(data[, DV], na.rm=TRUE))#
                 min_value <- min(min(l0.boot, na.rm=TRUE))#
                max_value <- max(max(l0.boot, na.rm=TRUE))#
               ylim <- c(min_value, max_value)#
            }#
#
			if(limitdens==FALSE) {#
            # vertical cross-sectional density estimate#
            d2 <- ddply(b2[, c("x", "value")], .(x), function(df) {#
                res <- data.frame(density(df$value, na.rm=TRUE, n=slices, from=ylim[1], to=ylim[2])[c("x", "y")])#
                #res <- data.frame(density(df$value, na.rm=TRUE, n=slices)[c("x", "y")])#
                colnames(res) <- c("y", "dens")#
                return(res)#
            }, .progress="text")#
#
			} else {#
			 d2 <- ddply(b2[, c("index","x", "value")], .(x), function(df) {#
                res <- data.frame(density(df$value, na.rm=TRUE, n=slices, from=CI.boot[CI.boot$index==df[1]$index,]$SD1, to=CI.boot[CI.boot$index==df[1]$index,]$SD7)[c("x", "y")])#
                #res <- data.frame(density(df$value, na.rm=TRUE, n=slices)[c("x", "y")])#
                colnames(res) <- c("y", "dens")#
                return(res)#
            }, .progress="text")#
			}#
            maxdens <- max(d2$dens)#
            mindens <- min(d2$dens)#
            d2$dens.scaled <- (d2$dens - mindens)/maxdens   #
            ## Tile approach#
            d2$alpha.factor <- d2$dens.scaled^shade.alpha#
            gg.tiles <-  list(geom_tile(data=d2, aes(x=x, y=y, fill=dens.scaled, alpha=alpha.factor)), scale_fill_gradientn("dens.scaled", colours=palette), scale_alpha_continuous(range=c(0.001, 1)))#
        }#
        if (quantize == "SD") {#
            ## Polygon approach#
            SDs <- melt(CI.boot[, c("x", paste0("SD", 1:7))], id.vars="x")#
            count <- 0#
            d3 <- data.frame()#
            col <- c(1,2,3,3,2,1)#
            for (i in 1:6) {#
                seg1 <- SDs[SDs$variable == paste0("SD", i), ]#
                seg2 <- SDs[SDs$variable == paste0("SD", i+1), ]#
                seg <- rbind(seg1, seg2[nrow(seg2):1, ])#
                seg$group <- count#
                seg$col <- col[i]#
                count <- count + 1#
                d3 <- rbind(d3, seg)#
            }#
            gg.poly <-  list(geom_polygon(data=d3, aes(x=x, y=value, color=NULL, fill=col, group=group)), scale_fill_gradientn("dens.scaled", colours=palette, values=seq(-1, 3, 1)))#
        }#
    }#
    print("Build ggplot figure ...")#
    flush.console()#
    if (spag==TRUE) {#
        gg.spag <-  geom_path(data=b2, aes(x=x, y=value, group=B), size=0.7, alpha=10/B, color=spag.color)#
    }#
    if (show.median == TRUE) {#
        if (mweight == TRUE) {#
            gg.median <-  geom_path(data=CI.boot, aes(x=x, y=M, alpha=w3^3), size=.6, linejoin="mitre", color=median.col)#
        } else {#
            gg.median <-  geom_path(data=CI.boot, aes(x=x, y=M), size = 0.6, linejoin="mitre", color=median.col)#
        }#
    }#
    # Confidence limits#
    if (show.CI == TRUE) {#
     if(CIcol == "") { #
        gg.CI1 <- geom_path(data=CI.boot, aes(x=x, y=UL), size=1, color=palette[1], linetype=2, alpha=.5)#
        gg.CI2 <- geom_path(data=CI.boot, aes(x=x, y=LL), size=1, color=palette[1],linetype=2, alpha=.5)#
   	} else {#
        gg.CI1 <- geom_path(data=CI.boot, aes(x=x, y=UL), size=1, color=CIcol, linetype=2, alpha=.5)#
        gg.CI2 <- geom_path(data=CI.boot, aes(x=x, y=LL), size=1, color=CIcol,linetype=2, alpha=.5)   	#
   	}#
   }#
    # plain linear regression line#
    if (show.lm==TRUE) {gg.lm <- geom_smooth(method="lm", color="darkgreen", se=FALSE)}#
    if(show.points==TRUE) {#
    gg.points <- geom_point(data=data, aes_string(x=IV, y=DV), size=1, shape=shape, fill="white", color="black")        #
    }    #
    if (title != "") {#
        gg.title <- theme(title=title)#
    }#
#    gg.elements <- list(gg.tiles, gg.poly, gg.spag, gg.median, gg.CI1, gg.CI2, gg.lm, gg.points, gg.title, theme(legend.position="none"), coord_cartesian(xlim = c(-0.4641767, 0.4405328),ylim= c(-.45,.4) ) )#
 #   gg.elements <- list(gg.tiles, gg.poly, gg.spag, gg.median, gg.CI1, gg.CI2, gg.lm, gg.points, gg.title, theme(legend.position="none"), coord_cartesian(xlim = c(-0.3, 0.3),ylim= c(-.45,.4) ) )#
 #   gg.elements <- list(gg.tiles, gg.poly, gg.spag, gg.median, gg.CI1, gg.CI2, gg.lm, gg.points, gg.title, theme(legend.position="none"), coord_cartesian(xlim = c(-0.4, 0.4),ylim= c(-.05,.05) ) )#
    gg.elements <- list(gg.tiles, gg.poly, gg.spag, gg.median, gg.CI1, gg.CI2, gg.lm, gg.points, gg.title, theme(legend.position="none") )#
  if (add == FALSE) {#
        return(p0 + gg.elements)#
    } else {#
        return(gg.elements)#
    }#
}#
#
deMean<-function(var, data, fe) {#
#
res<-felm(attacks ~ (0) |  dd +rpt  | (0) | dd , data=DTA[!is.na(anyviolence)][treatov==1][!is.na(l1yndvi)])$residuals#
}#
#
load_or_install(c("ggmap","operator.tools","lfe","foreign","lubridate","date","igraph","kriging","geosphere","zoo","rgeos","fields","raster","rootSolve","R.oo","stringr","classInt","rgdal", "maptools","XML","plyr","RMySQL","RTextTools", "topicmodels","corpora","ggplot2","tm","foreach","RColorBrewer","wordcloud","lsa","MASS","openNLP","openNLPmodels.en","data.table","depmixS4"))#
#
###see whether effect even if i exclude residuals#
#
DTA<-data.table(data.frame(read.dta(file="/Users/thiemo/Dropbox/Research/NREGA Active/NREGA-JUN2015.dta")))#
DTA<-DTA[, names(DTA) %!in% grep("^rpt_|^ddt_*|^srt_*|^dd_*|^phasecode*|^yy*_SS*",names(DTA),value=TRUE), with=F]#
DTA[, dd:=factor(paste(code,districtmatch))]
DTA
res1<-felm(l1ylogmonsoon ~ 0 |  rpt+ dd  | 0 | dd, data=DTA[!is.na(logcumperstot)][!is.na(l1ylogmonsoon)][treatov==0])$residuals#
res2<-felm(logcumperstot ~ 0 |  rpt+ dd   | 0 | dd , data=DTA[!is.na(logcumperstot)][!is.na(l1ylogmonsoon)][treatov==0])$residuals#
RESIDS<-data.table(data.frame("res1"=res1,"res2"=res2))#
p1a<-vwReg(logcumperstot ~ l1ylogmonsoon, data=data.frame(RESIDS), showCI=TRUE, CIcol="#ffffff",show.lm=TRUE, slices=500, bw=TRUE)#
p1a+coord_cartesian(xlim = c(-0.5, 0.5), ylim=c(-.05,.05))+xlab("District Monsoon Residuals") + ylab("Agricultural Wages Residuals")+ theme(axis.text=element_text(size=16), axis.title=element_text(size=20))
res1<-felm(l1ylogmonsoon ~ 0 |  rpt+ dd  | 0 | dd, data=DTA[!is.na(logcumperstot)][!is.na(l1ylogmonsoon)])$residuals#
res2<-felm(logcumperstot ~ 0 |  rpt+ dd   | 0 | dd , data=DTA[!is.na(logcumperstot)][!is.na(l1ylogmonsoon)])$residuals#
RESIDS<-data.table(data.frame("res1"=res1,"res2"=res2))#
p1a<-vwReg(logcumperstot ~ l1ylogmonsoon, data=data.frame(RESIDS), showCI=TRUE, CIcol="#ffffff",show.lm=TRUE, slices=500, bw=TRUE)#
p1a+coord_cartesian(xlim = c(-0.5, 0.5), ylim=c(-.05,.05))+xlab("District Monsoon Residuals") + ylab("Agricultural Wages Residuals")+ theme(axis.text=element_text(size=16), axis.title=element_text(size=20))
p1a+coord_cartesian(xlim = c(-0.5, 0.5), ylim=c(-.25,.25))+xlab("District Monsoon Residuals") + ylab("Agricultural Wages Residuals")+ theme(axis.text=element_text(size=16), axis.title=element_text(size=20))
p1a+coord_cartesian(xlim = c(-0.5, 0.5), ylim=c(-.25,.15))+xlab("District Monsoon Residuals") + ylab("Agricultural Wages Residuals")+ theme(axis.text=element_text(size=16), axis.title=element_text(size=20))
res1<-felm(l1ylogmonsoon ~ 0 |  rpt+ dd  | 0 | dd, data=DTA[!is.na(logcumperstot)][naxalite==1][!is.na(l1ylogmonsoon)])$residuals#
res2<-felm(logcumperstot ~ 0 |  rpt+ dd   | 0 | dd , data=DTA[!is.na(logcumperstot)][naxalite==1][!is.na(l1ylogmonsoon)])$residuals#
RESIDS<-data.table(data.frame("res1"=res1,"res2"=res2))#
p1a<-vwReg(logcumperstot ~ l1ylogmonsoon, data=data.frame(RESIDS), showCI=TRUE, CIcol="#ffffff",show.lm=TRUE, slices=500, bw=TRUE)#
p1a+coord_cartesian(xlim = c(-0.5, 0.5), ylim=c(-.05,.05))+xlab("District Monsoon Residuals") + ylab("Agricultural Wages Residuals")+ theme(axis.text=element_text(size=16), axis.title=element_text(size=20))
p1a+coord_cartesian(xlim = c(-0.5, 0.5), ylim=c(-.25,.25))+xlab("District Monsoon Residuals") + ylab("Agricultural Wages Residuals")+ theme(axis.text=element_text(size=16), axis.title=element_text(size=20))
res1<-felm(l1ylogmonsoon ~ 0 |  rpt+ dd  | 0 | dd, data=DTA[!is.na(cumperstot)][naxalite==1][!is.na(l1ylogmonsoon)])$residuals#
res2<-felm(cumperstot ~ 0 |  rpt+ dd   | 0 | dd , data=DTA[!is.na(cumperstot)][naxalite==1][!is.na(l1ylogmonsoon)])$residuals#
RESIDS<-data.table(data.frame("res1"=res1,"res2"=res2))#
p1a<-vwReg(cumperstot ~ l1ylogmonsoon, data=data.frame(RESIDS), showCI=TRUE, CIcol="#ffffff",show.lm=TRUE, slices=500, bw=TRUE)#
p1a+coord_cartesian(xlim = c(-0.5, 0.5), ylim=c(-.05,.05))+xlab("District Monsoon Residuals") + ylab("Agricultural Wages Residuals")+ theme(axis.text=element_text(size=16), axis.title=element_text(size=20))
p1a+coord_cartesian(xlim = c(-0.5, 0.5),)+xlab("District Monsoon Residuals") + ylab("Agricultural Wages Residuals")+ theme(axis.text=element_text(size=16), axis.title=element_text(size=20))
res2
mean(res2)
plot(res2,res1)
plot(res1,res2)
plot(lm(res1,res2))
plot(lm(res1~res2))
help(lm)
res2[1578]
res1<-felm(l1ylogmonsoon ~ 0 |  rpt+ dd  | 0 | dd, data=DTA[!is.na(cumperstot)][lwe==1][!is.na(l1ylogmonsoon)])$residuals#
res2<-felm(cumperstot ~ 0 |  rpt+ dd   | 0 | dd , data=DTA[!is.na(cumperstot)][lwe==1][!is.na(l1ylogmonsoon)])$residuals#
RESIDS<-data.table(data.frame("res1"=res1,"res2"=res2))#
p1a<-vwReg(cumperstot ~ l1ylogmonsoon, data=data.frame(RESIDS), showCI=TRUE, CIcol="#ffffff",show.lm=TRUE, slices=500, bw=TRUE)#
p1a+coord_cartesian(xlim = c(-0.5, 0.5), ylim=c(-.05,.05))+xlab("District Monsoon Residuals") + ylab("Agricultural Wages Residuals")+ theme(axis.text=element_text(size=16), axis.title=element_text(size=20))
p1a+coord_cartesian(xlim = c(-0.5, 0.5) +xlab("District Monsoon Residuals") + ylab("Agricultural Wages Residuals")+ theme(axis.text=element_text(size=16), axis.title=element_text(size=20))
p1a+coord_cartesian(xlim = c(-0.5, 0.5)) +xlab("District Monsoon Residuals") + ylab("Agricultural Wages Residuals")+ theme(axis.text=element_text(size=16), axis.title=element_text(size=20))
res1<-felm(logmonsoon ~ 0 |  rpt+ dd  | 0 | dd, data=DTA[!is.na(cumperstot)][lwe==1][!is.na(l1ylogmonsoon)])$residuals#
res2<-felm(cumperstot ~ 0 |  rpt+ dd   | 0 | dd , data=DTA[!is.na(cumperstot)][lwe==1][!is.na(l1ylogmonsoon)])$residuals#
RESIDS<-data.table(data.frame("res1"=res1,"res2"=res2))#
p1a<-vwReg(cumperstot ~ l1ylogmonsoon, data=data.frame(RESIDS), showCI=TRUE, CIcol="#ffffff",show.lm=TRUE, slices=500, bw=TRUE)#
p1a+coord_cartesian(xlim = c(-0.5, 0.5))+xlab("District Monsoon Residuals") + ylab("Agricultural Wages Residuals")+ theme(axis.text=element_text(size=16), axis.title=element_text(size=20))
res1<-felm(logmonsoon ~ 0 |  rpt+ dd  | 0 | dd, data=DTA[!is.na(cumperstot)][lwe==1][!is.na(l1ylogmonsoon)])$residuals#
res2<-felm(cumperstot ~ 0 |  rpt+ dd   | 0 | dd , data=DTA[!is.na(cumperstot)][lwe==1][!is.na(l1ylogmonsoon)])$residuals#
RESIDS<-data.table(data.frame("res1"=res1,"res2"=res2))#
p1a<-vwReg(cumperstot ~ logmonsoon, data=data.frame(RESIDS), showCI=TRUE, CIcol="#ffffff",show.lm=TRUE, slices=500, bw=TRUE)#
p1a+coord_cartesian(xlim = c(-0.5, 0.5))+xlab("District Monsoon Residuals") + ylab("Agricultural Wages Residuals")+ theme(axis.text=element_text(size=16), axis.title=element_text(size=20))
res1<-felm(logmonsoon ~ 0 |  rpt+ dd  | 0 | dd, data=DTA[!is.na(cumperstot)][lwe==0][!is.na(l1ylogmonsoon)])$residuals#
res2<-felm(cumperstot ~ 0 |  rpt+ dd   | 0 | dd , data=DTA[!is.na(cumperstot)][lwe==0][!is.na(l1ylogmonsoon)])$residuals#
RESIDS<-data.table(data.frame("res1"=res1,"res2"=res2))#
p1a<-vwReg(cumperstot ~ logmonsoon, data=data.frame(RESIDS), showCI=TRUE, CIcol="#ffffff",show.lm=TRUE, slices=500, bw=TRUE)#
p1a+coord_cartesian(xlim = c(-0.5, 0.5))+xlab("District Monsoon Residuals") + ylab("Agricultural Wages Residuals")+ theme(axis.text=element_text(size=16), axis.title=element_text(size=20))
library(outliers)
install.package("outliers")
install.packages("outliers")
library(outliers)
outlier(DTA$cumperstot)
DTA[cumperstot== outlier(DTA$cumperstot)#
]
DTA[dd=="WB midnapore"][, c("year","districtmatch","code","cumperstot","exp_tot","exp_labour","exp_tot_popu")]
DTA[dd=="WB midnapore"][, c("year","districtmatch","code","cumperstot","exp_tot","exp_labour","exp_tot_popu"),with=F]
res1<-felm(logmonsoon ~ 0 |  rpt+ dd  | 0 | dd, data=DTA[!is.na(cumperstot)][lwe==0][!is.na(l1ylogmonsoon)])$residuals#
res2<-felm(exp_tot_popu ~ 0 |  rpt+ dd   | 0 | dd , data=DTA[!is.na(cumperstot)][lwe==0][!is.na(l1ylogmonsoon)])$residuals#
RESIDS<-data.table(data.frame("res1"=res1,"res2"=res2))#
p1a<-vwReg(exp_tot_popu ~ logmonsoon, data=data.frame(RESIDS), showCI=TRUE, CIcol="#ffffff",show.lm=TRUE, slices=500, bw=TRUE)#
p1a+coord_cartesian(xlim = c(-0.5, 0.5))+xlab("District Monsoon Residuals") + ylab("Agricultural Wages Residuals")+ theme(axis.text=element_text(size=16), axis.title=element_text(size=20))
res1<-felm(l1ylogmonsoon ~ 0 |  rpt+ dd  | 0 | dd, data=DTA[!is.na(exp_tot_popu)][lwe==0][!is.na(l1ylogmonsoon)])$residuals#
res2<-felm(exp_tot_popu ~ 0 |  rpt+ dd   | 0 | dd , data=DTA[!is.na(exp_tot_popu)][lwe==0][!is.na(l1ylogmonsoon)])$residuals#
RESIDS<-data.table(data.frame("res1"=res1,"res2"=res2))#
p1a<-vwReg(exp_tot_popu ~ l1ylogmonsoon, data=data.frame(RESIDS), showCI=TRUE, CIcol="#ffffff",show.lm=TRUE, slices=500, bw=TRUE)#
p1a+coord_cartesian(xlim = c(-0.5, 0.5))+xlab("District Monsoon Residuals") + ylab("Agricultural Wages Residuals")+ theme(axis.text=element_text(size=16), axis.title=element_text(size=20))
p1a+coord_cartesian(xlim = c(-0.5, 0.5), ylim=c(-200,200))+xlab("District Monsoon Residuals") + ylab("Agricultural Wages Residuals")+ theme(axis.text=element_text(size=16), axis.title=element_text(size=20))
res1<-felm(l1ylogmonsoon ~ 0 |  rpt+ dd  | 0 | dd, data=DTA[!is.na(exp_tot_popu)][lwe==1][!is.na(l1ylogmonsoon)])$residuals#
res2<-felm(exp_tot_popu ~ 0 |  rpt+ dd   | 0 | dd , data=DTA[!is.na(exp_tot_popu)][lwe==1][!is.na(l1ylogmonsoon)])$residuals#
RESIDS<-data.table(data.frame("res1"=res1,"res2"=res2))#
p1a<-vwReg(exp_tot_popu ~ l1ylogmonsoon, data=data.frame(RESIDS), showCI=TRUE, CIcol="#ffffff",show.lm=TRUE, slices=500, bw=TRUE)#
p1a+coord_cartesian(xlim = c(-0.5, 0.5))+xlab("District Monsoon Residuals") + ylab("Agricultural Wages Residuals")+ theme(axis.text=element_text(size=16), axis.title=element_text(size=20))
p1a+coord_cartesian(xlim = c(-0.5, 0.5), ylim=c(-100,100))+xlab("District Monsoon Residuals") + ylab("Agricultural Wages Residuals")+ theme(axis.text=element_text(size=16), axis.title=element_text(size=20))
res1<-felm(l1ylogmonsoon ~ 0 |  rpt+ dd  | 0 | dd, data=DTA[!is.na(exp_tot_popu)][sumkill>0][!is.na(l1ylogmonsoon)])$residuals#
res2<-felm(exp_tot_popu ~ 0 |  rpt+ dd   | 0 | dd , data=DTA[!is.na(exp_tot_popu)][sumkill>0][!is.na(l1ylogmonsoon)])$residuals#
RESIDS<-data.table(data.frame("res1"=res1,"res2"=res2))#
p1a<-vwReg(exp_tot_popu ~ l1ylogmonsoon, data=data.frame(RESIDS), showCI=TRUE, CIcol="#ffffff",show.lm=TRUE, slices=500, bw=TRUE)#
p1a+coord_cartesian(xlim = c(-0.5, 0.5))+xlab("District Monsoon Residuals") + ylab("Agricultural Wages Residuals")+ theme(axis.text=element_text(size=16), axis.title=element_text(size=20))
min(res2)
max(res2)
res1<-felm(l1ylogmonsoon ~ 0 |  rpt+ dd  | 0 | dd, data=DTA[!is.na(exp_tot_popu)][sumkill>0][!is.na(l1ylogmonsoon)])$residuals#
res2<-felm(exp_tot_popu ~ 0 |  rpt+ dd   | 0 | dd , data=DTA[!is.na(exp_tot_popu)][sumkill>0][!is.na(l1ylogmonsoon)])$residuals#
RESIDS<-data.table(data.frame("res1"=res1,"res2"=res2))#
p1a<-vwReg(exp_tot_popu ~ l1ylogmonsoon, data=data.frame(RESIDS[res2>-1000 & res2<1000]), showCI=TRUE, CIcol="#ffffff",show.lm=TRUE, slices=500, bw=TRUE)#
p1a+coord_cartesian(xlim = c(-0.5, 0.5))+xlab("District Monsoon Residuals") + ylab("Agricultural Wages Residuals")+ theme(axis.text=element_text(size=16), axis.title=element_text(size=20))
res1<-felm(l1ylogmonsoon ~ 0 |  rpt+ dd  | 0 | dd, data=DTA[!is.na(exp_tot_popu)][sumkill>0][!is.na(l1ylogmonsoon)])$residuals#
res2<-felm(exp_tot_popu ~ 0 |  rpt+ dd   | 0 | dd , data=DTA[!is.na(exp_tot_popu)][sumkill>0][!is.na(l1ylogmonsoon)])$residuals#
RESIDS<-data.table(data.frame("res1"=res1,"res2"=res2))#
p1a<-vwReg(exp_tot_popu ~ l1ylogmonsoon, data=data.frame(RESIDS[exp_tot_popu>-1000 & exp_tot_popu <1000]), showCI=TRUE, CIcol="#ffffff",show.lm=TRUE, slices=500, bw=TRUE)#
p1a+coord_cartesian(xlim = c(-0.5, 0.5))+xlab("District Monsoon Residuals") + ylab("Agricultural Wages Residuals")+ theme(axis.text=element_text(size=16), axis.title=element_text(size=20))
p1a+coord_cartesian(xlim = c(-0.5, 0.5), ylim=c(-100,100))+xlab("District Monsoon Residuals") + ylab("Agricultural Wages Residuals")+ theme(axis.text=element_text(size=16), axis.title=element_text(size=20))
res1<-felm(l1ylogmonsoon ~ 0 |  rpt+ dd  | 0 | dd, data=DTA[!is.na(exp_tot_popu)][naxalite==1][!is.na(l1ylogmonsoon)])$residuals#
res2<-felm(exp_tot_popu ~ 0 |  rpt+ dd   | 0 | dd , data=DTA[!is.na(exp_tot_popu)][naxalite==1][!is.na(l1ylogmonsoon)])$residuals#
RESIDS<-data.table(data.frame("res1"=res1,"res2"=res2))#
p1a<-vwReg(exp_tot_popu ~ l1ylogmonsoon, data=data.frame(RESIDS[exp_tot_popu>-1000 & exp_tot_popu <1000]), showCI=TRUE, CIcol="#ffffff",show.lm=TRUE, slices=500, bw=TRUE)#
p1a+coord_cartesian(xlim = c(-0.5, 0.5))+xlab("District Monsoon Residuals") + ylab("Agricultural Wages Residuals")+ theme(axis.text=element_text(size=16), axis.title=element_text(size=20))
p1a+coord_cartesian(xlim = c(-0.5, 0.5), ylim=c(-100,100))+xlab("District Monsoon Residuals") + ylab("Agricultural Wages Residuals")+ theme(axis.text=element_text(size=16), axis.title=element_text(size=20))
res1<-felm(l1ylogmonsoon ~ 0 |  rpt+ dd  | 0 | dd, data=DTA[!is.na(exp_tot_popu)][naxalite==1  & year<=2009][!is.na(l1ylogmonsoon)])$residuals#
res2<-felm(exp_tot_popu ~ 0 |  rpt+ dd   | 0 | dd , data=DTA[!is.na(exp_tot_popu)][naxalite==1 & year<=2009][!is.na(l1ylogmonsoon)])$residuals#
RESIDS<-data.table(data.frame("res1"=res1,"res2"=res2))#
p1a<-vwReg(exp_tot_popu ~ l1ylogmonsoon, data=data.frame(RESIDS), showCI=TRUE, CIcol="#ffffff",show.lm=TRUE, slices=500, bw=TRUE)#
p1a+coord_cartesian(xlim = c(-0.5, 0.5))+xlab("District Monsoon Residuals") + ylab("Agricultural Wages Residuals")+ theme(axis.text=element_text(size=16), axis.title=element_text(size=20))
res1<-felm(l1ylogmonsoon ~ 0 |  rpt+ dd  | 0 | dd, data=DTA[!is.na(exp_tot_popu)][naxalite==1  & year<=2009][!is.na(l1ylogmonsoon)])$residuals#
res2<-felm(logexptotpopu ~ 0 |  rpt+ dd   | 0 | dd , data=DTA[!is.na(exp_tot_popu)][naxalite==1 & year<=2009][!is.na(l1ylogmonsoon)])$residuals#
RESIDS<-data.table(data.frame("res1"=res1,"res2"=res2))#
p1a<-vwReg(exp_tot_popu ~ l1ylogmonsoon, data=data.frame(RESIDS), showCI=TRUE, CIcol="#ffffff",show.lm=TRUE, slices=500, bw=TRUE)#
p1a+coord_cartesian(xlim = c(-0.5, 0.5))+xlab("District Monsoon Residuals") + ylab("Agricultural Wages Residuals")+ theme(axis.text=element_text(size=16), axis.title=element_text(size=20))
res1<-felm(l1ylogmonsoon ~ 0 |  rpt+ dd  | 0 | dd, data=DTA[!is.na(logcumperstot)][naxalite==1  & year<=2009][!is.na(l1ylogmonsoon)])$residuals#
res2<-felm(logcumperstot ~ 0 |  rpt+ dd   | 0 | dd , data=DTA[!is.na(logcumperstot)][naxalite==1 & year<=2009][!is.na(l1ylogmonsoon)])$residuals#
RESIDS<-data.table(data.frame("res1"=res1,"res2"=res2))#
p1a<-vwReg(exp_tot_popu ~ l1ylogmonsoon, data=data.frame(RESIDS), showCI=TRUE, CIcol="#ffffff",show.lm=TRUE, slices=500, bw=TRUE)#
p1a+coord_cartesian(xlim = c(-0.5, 0.5))+xlab("District Monsoon Residuals") + ylab("Agricultural Wages Residuals")+ theme(axis.text=element_text(size=16), axis.title=element_text(size=20))
res1<-felm(l1ylogmonsoon ~ 0 |  rpt+ dd  | 0 | dd, data=DTA[!is.na(logcumperstot)][naxalite==1  & year<=2009][!is.na(l1ylogmonsoon)])$residuals#
res2<-felm(logcumperstot ~ 0 |  rpt+ dd   | 0 | dd , data=DTA[!is.na(logcumperstot)][naxalite==1 & year<=2009][!is.na(l1ylogmonsoon)])$residuals#
RESIDS<-data.table(data.frame("res1"=res1,"res2"=res2))#
p1a<-vwReg(logcumperstot ~ l1ylogmonsoon, data=data.frame(RESIDS), showCI=TRUE, CIcol="#ffffff",show.lm=TRUE, slices=500, bw=TRUE)#
p1a+coord_cartesian(xlim = c(-0.5, 0.5))+xlab("District Monsoon Residuals") + ylab("Agricultural Wages Residuals")+ theme(axis.text=element_text(size=16), axis.title=element_text(size=20))
res1<-felm(l1ylogmonsoon ~ 0 |  rpt+ dd  | 0 | dd, data=DTA[!is.na(logcumperstot)][year<=2009][!is.na(l1ylogmonsoon)])$residuals#
res2<-felm(logcumperstot ~ 0 |  rpt+ dd   | 0 | dd , data=DTA[!is.na(logcumperstot)][year<=2009][!is.na(l1ylogmonsoon)])$residuals#
RESIDS<-data.table(data.frame("res1"=res1,"res2"=res2))#
p1a<-vwReg(logcumperstot ~ l1ylogmonsoon, data=data.frame(RESIDS), showCI=TRUE, CIcol="#ffffff",show.lm=TRUE, slices=500, bw=TRUE)#
p1a+coord_cartesian(xlim = c(-0.5, 0.5))+xlab("District Monsoon Residuals") + ylab("Agricultural Wages Residuals")+ theme(axis.text=element_text(size=16), axis.title=element_text(size=20))
p1a+coord_cartesian(xlim = c(-0.5, 0.5), ylim=c(-.2,.2))+xlab("District Monsoon Residuals") + ylab("Agricultural Wages Residuals")+ theme(axis.text=element_text(size=16), axis.title=element_text(size=20))
DTA[, logexptotpopu:=log(exp_tot_popu)]
res1<-felm(l1ylogmonsoon ~ 0 |  rpt+ dd  | 0 | dd, data=DTA[!is.na(logexptotpopu)][year<=2009][!is.na(l1ylogmonsoon)])$residuals#
res2<-felm(logexptotpopu ~ 0 |  rpt+ dd   | 0 | dd , data=DTA[!is.na(logexptotpopu)][year<=2009][!is.na(l1ylogmonsoon)])$residuals#
RESIDS<-data.table(data.frame("res1"=res1,"res2"=res2))#
p1a<-vwReg(logexptotpopu ~ l1ylogmonsoon, data=data.frame(RESIDS), showCI=TRUE, CIcol="#ffffff",show.lm=TRUE, slices=500, bw=TRUE)#
p1a+coord_cartesian(xlim = c(-0.5, 0.5))+xlab("District Monsoon Residuals") + ylab("Agricultural Wages Residuals")+ theme(axis.text=element_text(size=16), axis.title=element_text(size=20))
p1a+coord_cartesian(xlim = c(-0.5, 0.5), ylim=c(-.5,.5))+xlab("District Monsoon Residuals") + ylab("Agricultural Wages Residuals")+ theme(axis.text=element_text(size=16), axis.title=element_text(size=20))
EXP.NEW<-list.files("/Users/thiemo/AeroFS/Research/NREGA/NREGA iMacro/jun2015")
ffs<-list.files("/Users/thiemo/AeroFS/Research/NREGA/NREGA iMacro/jun2015")
EXP.NEW<-lapply(ffs, function(x) read.csv(file=paste("/Users/thiemo/AeroFS/Research/NREGA/NREGA iMacro/jun2015/",x,sep="")[, 1:4] ))
x
x=ffs[1]
x
ffs<-list.files("/Users/thiemo/AeroFS/Research/NREGA/NREGA iMacro/jun2015")#
ffs<-grep("exp",ffs,value=TRUE)#
#
EXP.NEW<-lapply(ffs, function(x) read.csv(file=paste("/Users/thiemo/AeroFS/Research/NREGA/NREGA iMacro/jun2015/",x,sep="")[, 1:4] ))
x
read.csv(file=paste("/Users/thiemo/AeroFS/Research/NREGA/NREGA iMacro/jun2015/",x,sep="")
()
read.csv(file=paste("/Users/thiemo/AeroFS/Research/NREGA/NREGA iMacro/jun2015/",x,sep=""))
EXP.NEW<-lapply(ffs, function(x) read.csv(file=paste("/Users/thiemo/AeroFS/Research/NREGA/NREGA iMacro/jun2015/",x,sep=""))[, 1:4] ))
read.csv(file=paste("/Users/thiemo/AeroFS/Research/NREGA/NREGA iMacro/jun2015/",x,sep=""))[, 1:4]
ffs
x=ffs[7]
read.csv(file=paste("/Users/thiemo/AeroFS/Research/NREGA/NREGA iMacro/jun2015/",x,sep=""))[, 1:4]
ffs
EXP.NEW<-lapply(ffs[1:5], function(x) read.csv(file=paste("/Users/thiemo/AeroFS/Research/NREGA/NREGA iMacro/jun2015/",x,sep=""))[, 1:4] ))
EXP.NEW<-lapply(ffs[1:5], function(x) read.csv(file=paste("/Users/thiemo/AeroFS/Research/NREGA/NREGA iMacro/jun2015/",x,sep=""))[, 1:4] )
EX.NEW
rbindlist(EXP.NEW)
EXP.NEW<-lapply(ffs[1:5], function(x) read.csv(file=paste("/Users/thiemo/AeroFS/Research/NREGA/NREGA iMacro/jun2015/",x,sep=""))[, 1:5] )
rbindlist(EXP.NEW)
EXP.NEW<-data.table(rbindlist(EXP.NEW))
EXP.NEW
class(EXP.NEW$)
class(EXP.NEW$Labour.exp...disbursed..Rs..In.Lakhs.)
EXP.NEW$Labour.exp...disbursed..Rs..In.Lakhs.<-as.character(EXP.NEW$Labour.exp...disbursed..Rs..In.Lakhs.)
EXP.NEW$Material.exp...disbursed..Rs..In.Lakhs.<-as.character(EXP.NEW$Material.exp...disbursed..Rs..In.Lakhs.)
EXP.NEW$labour<-gsub(",","",EXP.NEW$Labour.exp...disbursed..Rs..In.Lakhs.)
EXP.NEW<-lapply(ffs[1:5], function(x) cbind(year=x, read.csv(file=paste("/Users/thiemo/AeroFS/Research/NREGA/NREGA iMacro/jun2015/",x,sep=""))[, 1:5]) )#
EXP.NEW<-data.table(rbindlist(EXP.NEW))#
EXP.NEW$Labour.exp...disbursed..Rs..In.Lakhs.<-as.character(EXP.NEW$Labour.exp...disbursed..Rs..In.Lakhs.)#
EXP.NEW$Material.exp...disbursed..Rs..In.Lakhs.<-as.character(EXP.NEW$Material.exp...disbursed..Rs..In.Lakhs.)#
EXP.NEW$labour<-gsub(",","",EXP.NEW$Labour.exp...disbursed..Rs..In.Lakhs.)#
EXP.NEW$material<-gsub(",","",EXP.NEW$Material.exp...disbursed..Rs..In.Lakhs.)
EXP.NEW
EXP.NEW$year<-gsub("exp-|.csv","",EXP.NEW$year)
EXP.NEW
ss<-names(table(EXP.NEW$State.Name))#
codes <- c("AN","AP","AR","AS","BR","CT","","","GA","GJ","HR","HP","JK","JH","KA","KL","","MP","MH","MN","ML","MZ","NL","OR","","PB","RJ","SK","TN","","TR","UP","UT","WB")
ss
ss<-names(table(EXP.NEW$State.Name))#
codes <- c("","AN","AP","AR","AS","BR","CT","","","GA","GJ","HR","HP","JK","JH","KA","KL","","MP","MH","MN","ML","MZ","NL","OR","","PB","RJ","SK","TN","TR","UP","UT","WB")
ss<-names(table(EXP.NEW$State.Name))#
codes <- c("","AN","AP","AR","AS","BR","CT","","","GA","GJ","HR","HP","JK","JH","KA","KL","","MP","MH","MN","ML","MZ","NL","OR","","PB","RJ","SK","TN","TR","UP","UT","WB")#
EXP.NEW$code<-""#
for(i in 1:length(ss)) {#
EXP.NEW[State.Name==ss[i]]$code=codes[i]#
}#
EXP.NEW<-EXP.NEW[code!=""]#
EXP.NEW$District.Name<-preProcess(EXP.NEW$District.Name)
EXP.NEW
EXP.NEW[District.Name=="adilabad"]
temps <- EXP.NEW[,.N, by=c("District.Name","State.Name","code")]#
temps$District.Name<-preProcess(temps$District.Name)#
#
temps<-temps[!is.na(code)]#
temps$districtmatch<-""#
for(i in 1:nrow(temps)) {#
cat(i, " ")#
if(temps[i]$code !="") {#
  mmatch<- ClosestMatch2(temps[i]$District.Name, districts[state==temps[i]$code]$variation)[1]#
   if(length(mmatch)>0) {#
	if(mmatch$V2>.6) {#
  	temps[i]$districtmatch <- districts[state==temps[i]$code & variation==mmatch$V1][1]$name#
	}#
}#
}#
}
ClosestMatch2
library(RecordLinkage)#
#
ClosestMatch2 = function(string, stringVector){#
#
  distance = levenshteinSim(string, stringVector);#
  data.table(stringVector[distance == max(distance)],max(distance))	  #
}
temps <- EXP.NEW[,.N, by=c("District.Name","State.Name","code")]#
temps$District.Name<-preProcess(temps$District.Name)#
#
temps<-temps[!is.na(code)]#
temps$districtmatch<-""#
for(i in 1:nrow(temps)) {#
cat(i, " ")#
if(temps[i]$code !="") {#
  mmatch<- ClosestMatch2(temps[i]$District.Name, districts[state==temps[i]$code]$variation)[1]#
   if(length(mmatch)>0) {#
	if(mmatch$V2>.6) {#
  	temps[i]$districtmatch <- districts[state==temps[i]$code & variation==mmatch$V1][1]$name#
	}#
}#
}#
}
panelStructure <- function(group,timevec) {#
tt<-rep(timevec,length(group))#
tt2 <- as.character(sort(rep(group,length(timevec))))#
mat <- cbind("group"=data.frame(tt2),"timevec"=data.frame(tt))#
names(mat)<-c("group","timevec")#
mat#
}#
load_or_install(c("lubridate","foreign","doMC","countrycode","operator.tools","rgeos","geosphere","fields","raster","rootSolve","R.oo","stringr","classInt","rgdal", "maptools","XML","plyr","RMySQL","RTextTools", "topicmodels","corpora","ggplot2","tm","foreach","RColorBrewer","wordcloud","lsa","MASS","openNLP","openNLPmodels.en","data.table","depmixS4"))#
con <- dbConnect(MySQL(), username="root", password="", dbname="satp", unix.socket="/tmp/mysql.sock")
query <- paste("SELECT *  FROM districts2001 d LEFT JOIN districts2001spellings ds ON d.districtid = ds.district")#
districts<-data.table(fetch(dbSendQuery(con,query),-1))#
districts$variation[is.na(districts$variation)]<-districts$name[is.na(districts$variation)]#
districts$name<-preProcess(districts$name)#
districts$variation<-preProcess(districts$variation)#
districts$state<-substring(districts$code,4,5)
temps <- EXP.NEW[,.N, by=c("District.Name","State.Name","code")]#
temps$District.Name<-preProcess(temps$District.Name)#
#
temps<-temps[!is.na(code)]#
temps$districtmatch<-""#
for(i in 1:nrow(temps)) {#
cat(i, " ")#
if(temps[i]$code !="") {#
  mmatch<- ClosestMatch2(temps[i]$District.Name, districts[state==temps[i]$code]$variation)[1]#
   if(length(mmatch)>0) {#
	if(mmatch$V2>.6) {#
  	temps[i]$districtmatch <- districts[state==temps[i]$code & variation==mmatch$V1][1]$name#
	}#
}#
}#
}
temps
temps[districtmatch==""]
districts[grep("adila",variation)]
districts[grep("adi",variation)]
districts[grep("labad",variation)]
class(temps$District.Name)
class(districts$variation)
districts[grep("adi",variation)]
districts[state=="AP"]
query <- paste("SELECT *  FROM districts2001 d LEFT JOIN districts2001spellings ds ON d.districtid = ds.district")#
districts<-data.table(fetch(dbSendQuery(con,query),-1))#
#
districts$variation[is.na(districts$variation)]<-districts$name[is.na(districts$variation)]#
districts$name<-preProcess(districts$name)#
districts$variation<-preProcess(districts$variation)#
districts$state<-substring(districts$code,4,5)#
districts<-districts[country=="India"]
districts[state=="AP"]
con <- dbConnect(MySQL(), username="root", password="", dbname="satp", unix.socket="/tmp/mysql.sock")#
#
query <- paste("SELECT *  FROM districts2001 d LEFT JOIN districts2001spellings ds ON d.districtid = ds.district")#
districts<-data.table(fetch(dbSendQuery(con,query),-1))#
#
districts$variation[is.na(districts$variation)]<-districts$name[is.na(districts$variation)]#
districts$name<-preProcess(districts$name)#
districts$variation<-preProcess(districts$variation)#
districts$state<-substring(districts$code,4,5)#
districts<-districts[country=="India"]
districts[state=="AP"]
districts
con <- dbConnect(MySQL(), username="root", password="", dbname="nrega", unix.socket="/tmp/mysql.sock")#
#
query <- paste("SELECT *  FROM districts2001 d LEFT JOIN districts2001spellings ds ON d.districtid = ds.district")#
districts<-data.table(fetch(dbSendQuery(con,query),-1))
districts
districts$name<-preProcess(districts$name)#
districts$variation<-preProcess(districts$variation)#
districts$state<-substring(districts$code,4,5)#
districts<-districts[country=="India"]
districts
/Users/darinchristensen/Dropbox/ConleySEs/
cd("/Users/thiemo/Dropbox/ConleySEs/")
setwd("/Users/thiemo/Dropbox/ConleySEs/")
dta_file <- "~/Dropbox/ConleySEs/Data/new_testspatial.dta"#
DTA <- data.table(read.dta(dta_file))#
setnames(DTA, c("latitude","longitude"), c("lon","lat"))#
DTA <- DTA[, time := NULL]
library(foreign)
libraray(dta)
library(dta)
library(foreign)
dta_file <- "~/Dropbox/ConleySEs/Data/new_testspatial.dta"#
DTA <- data.table(read.dta(dta_file))#
setnames(DTA, c("latitude","longitude"), c("lon","lat"))#
DTA <- DTA[, time := NULL]
library(data.table)
dta_file <- "~/Dropbox/ConleySEs/Data/new_testspatial.dta"#
DTA <- data.table(read.dta(dta_file))#
setnames(DTA, c("latitude","longitude"), c("lon","lat"))#
DTA <- DTA[, time := NULL]
head(DTA)
# Loading R function to compute Conley SEs:#
source("~/Dropbox/ConleySEs/ConleySEs_17June2015.R")
# Loading R function to compute Conley SEs:#
source("~/Dropbox/ConleySEs/ConleySEs_17June2015.R")
SE <- ConleySEs(reg = m,#
    unit = "FIPS", time = "year",#
    lat = "lat", lon = "lon",#
    dist_fn = "SH", dist_cutoff = 500, lag_cutoff = 5,#
    verbose = FALSE, cores = 1)
